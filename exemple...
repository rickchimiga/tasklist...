using System.Collections.Generic;

namespace TaskList.Application.Interface
{
    public interface IAppService<TEntity> where TEntity : class
    {
        IEnumerable<TEntity> GetAll();
        IEnumerable<TEntity> GetAllAsNoTracking();
        TEntity GetById(int id);
        void Add(TEntity entity);
        void Update(TEntity entity);
        void Remove(TEntity entity);
        void Dispose();
    }
}
using System.Collections.Generic;
using TaskList.Domain.Entities;

namespace TaskList.Application.Interface
{
    public interface ITaskAppService : IAppService<Task>
    {
        IEnumerable<Task> ObterTasksExcluidas();
    }
}




using System;
using System.Collections.Generic;
using TaskList.Application.Interface;
using TaskList.Domain.Interfaces.Services;

namespace TaskList.Application
{
    public class AppServiceBase<TEntity> : IDisposable, IAppService<TEntity> where TEntity : class
    {
        private readonly IService<TEntity> _service;

        public AppServiceBase(IService<TEntity> service)
        {
            _service = service;
        }

        public IEnumerable<TEntity> GetAll()
        {
            return _service.GetAll();
        }

        public IEnumerable<TEntity> GetAllAsNoTracking()
        {
            return _service.GetAllAsNoTracking();
        }

        public TEntity GetById(int id)
        {
            return _service.GetById(id);
        }

        public void Add(TEntity entity)
        {
            _service.Add(entity);
        }

        public void Update(TEntity entity)
        {
            _service.Update(entity);
        }

        public void Remove(TEntity entity)
        {
            _service.Remove(entity);
        }

        public void Dispose()
        {
            _service.Dispose();
        }
    }
}


using System.Collections.Generic;
using TaskList.Application.Interface;
using TaskList.Domain.Entities;
using TaskList.Domain.Interfaces.Services;

namespace TaskList.Application
{
    public class TaskAppService : AppServiceBase<Task>, ITaskAppService
    {
        private readonly ITaskService _service;

        public TaskAppService(ITaskService service): base(service)
        {
            _service = service;
        }

        public IEnumerable<Task> ObterTasksExcluidas()
        {
            return _service.ObterTasksExcluidas(_service.GetAllAsNoTracking(true));
        }
    }
}



<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{11C081FF-113B-4BC5-BBE4-311B4EA8E8FE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>TaskList.Application</RootNamespace>
    <AssemblyName>TaskList.Application</AssemblyName>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AppServiceBase.cs" />
    <Compile Include="Interface\IAppService.cs" />
    <Compile Include="Interface\ITaskAppService.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="TaskAppService.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\TaskList.Domain\TaskList.Domain.csproj">
      <Project>{67850e2e-ad16-4b70-90ed-bb352e2bfba8}</Project>
      <Name>TaskList.Domain</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>


using System;

namespace TaskList.Domain.Entities
{
    public class Task
    {
        public int TaskId { get; set; }

        public bool Concluida { get; set; }

        public bool Excluida { get; set; }

        public string Titulo { get; set; }
        public string Descricao { get; set; }

        public DateTime? DtCriacao { get; private set; }
        public DateTime? DtEdicao { get; private set; }
        public DateTime? DtExclusao { get; set; }
        public DateTime? DtConclusao { get; set; }



        using System.Collections.Generic;

namespace TaskList.Domain.Interfaces.Repositories
{
    public interface IRepository<TEntity> where TEntity : class
    {
        IEnumerable<TEntity> GetAll();
        IEnumerable<TEntity> GetAllAsNoTracking();
        TEntity GetById(int id);
        void Add(TEntity entity);
        void Update(TEntity entity);
        void Remove(TEntity entity);
        void Dispose();
    }
}



using System.Web.Optimization;

namespace TaskList.MVC
{
    public class BundleConfig
    {
        // For more information on bundling, visit http://go.microsoft.com/fwlink/?LinkId=301862
        public static void RegisterBundles(BundleCollection bundles)
        {
            bundles.Add(new ScriptBundle("~/bundles/jquery").Include(
                        "~/Scripts/jquery-{version}.js"));

            bundles.Add(new ScriptBundle("~/bundles/jqueryval").Include(
                        "~/Scripts/jquery.validate*"));

            // Use the development version of Modernizr to develop with and learn from. Then, when you're
            // ready for production, use the build tool at http://modernizr.com to pick only the tests you need.
            bundles.Add(new ScriptBundle("~/bundles/modernizr").Include(
                        "~/Scripts/modernizr-*"));

            bundles.Add(new ScriptBundle("~/bundles/bootstrap").Include(
                      "~/Scripts/bootstrap.js",
                      "~/Scripts/respond.js"));

            bundles.Add(new StyleBundle("~/Content/css").Include(
                      "~/Content/bootstrap.css",
                      "~/Content/site.css"));

            // Datatables
            bundles.Add(new ScriptBundle("~/bundles/datatables/js").Include(
                      "~/Scripts/datatables/media/js/jquery.dataTables.min.js"));

            // Datatables bootstrap
            bundles.Add(new ScriptBundle("~/bundles/datatablesBootstrap/js").Include(
                      "~/Scripts/datatables.net-bs/js/dataTables.bootstrap.min.js"));

            // Datatables plugins
            bundles.Add(new ScriptBundle("~/bundles/datatablesPlugins/js").Include(
                      //"~/Scripts/pdfmake/build/pdfmake.min.js",
                      //"~/Scripts/pdfmake/build/vfs_fonts.js",
                      "~/Scripts/datatables.net-buttons/js/buttons.html5.min.js",
                      "~/Scripts/datatables.net-buttons/js/buttons.print.min.js",
                      "~/Scripts/datatables.net-buttons/js/dataTables.buttons.min.js",
                      "~/Scripts/datatables.net-buttons-bs/js/buttons.bootstrap.min.js"));

            // Datatables style
            bundles.Add(new StyleBundle("~/bundles/datatables/css").Include(
                      "~/Scripts/datatables.net-bs/css/dataTables.bootstrap.min.css"));
        }
    }
}

using System.Web.Mvc;
using TaskList.Application.Interface;
using TaskList.MVC.ViewModels;
using TaskList.MVC.ViewModels.Mappers;

namespace TaskList.MVC.Controllers
{
    public class TasksController : Controller
    {
        private readonly TaskMapper _mapper = new TaskMapper();
        private readonly ITaskAppService _service;

        public TasksController(ITaskAppService service)
        {
            _service = service;
        }

        // GET: Task
        public ActionResult Index()
        {
            return View(_mapper.ToViewModelList(_service.GetAllAsNoTracking()));
        }

        // GET: Task
        public ActionResult Excluidas()
        {
            return View(_mapper.ToViewModelList(_service.ObterTasksExcluidas()));
        }

        // GET: Task/Details/5
        public ActionResult Details(int id)
        {
            return View(_mapper.ToViewModel(_service.GetById(id)));
        }

        // GET: Task/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Task/Create
        [HttpPost]
        public ActionResult Create(TaskViewModel task)
        {
            if (!ModelState.IsValid) return View(task);

            _service.Add(_mapper.ToDomain(task));

            return RedirectToAction("Index");
        }

        // GET: Task/Edit/5
        public ActionResult Edit(int id)
        {
            return View(_mapper.ToViewModel(_service.GetById(id)));
        }

        // POST: Task/Edit/5
        [HttpPost]
        public ActionResult Edit(TaskViewModel task)
        {
            if (!ModelState.IsValid) return View(task);

            _service.Update(_mapper.ToDomain(task));

            return RedirectToAction("Index");
        }

        // GET: Task/Delete/5
        public ActionResult Delete(int id)
        {
            return View(_mapper.ToViewModel(_service.GetById(id)));
        }

        // POST: Task/Delete/5
        [HttpPost]
        public ActionResult Delete(TaskViewModel task)
        {
            if (!ModelState.IsValid) return View(task);

            _service.Remove(_mapper.ToDomain(task));

            return RedirectToAction("Index");
        }
    }
}

using System;
using System.ComponentModel.DataAnnotations;

namespace TaskList.MVC.ViewModels
{
    public class TaskViewModel
    {
        [Key]
        public int TaskId { get; set; }

        [Display(Name = "Task conluida")]
        public bool Concluida { get; set; }

        [Display(Name = "Task excluída")]
        public bool Excluida { get; set; }

        [Required(ErrorMessage = "Campo título é obrigatório. ")]
        [MaxLength(200, ErrorMessage = "Máximo {1} caracteres.")]
        [MinLength(5, ErrorMessage = "Minimo {1} caracteres. ")]
        [Display(Name = "Título")]
        public string Titulo { get; set; }

        [DataType(DataType.MultilineText)]
        [MaxLength(1500, ErrorMessage = "Máximo {1} caracteres.")]
        [MinLength(10, ErrorMessage = "Minimo {1} caracteres. ")]
        public string Descricao { get; set; }

        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy hh:mm}")]
        [Display(Name = "Data Criação")]
        public DateTime? DtCriacao { get; set; }

        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy hh:mm}")]
        [Display(Name = "Data Edição")]
        public DateTime? DtEdicao { get; set; }

        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy hh:mm}")]
        [Display(Name = "Data Exclusão")]
        public DateTime? DtExclusao { get; set; }

        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy hh:mm}")]
        [Display(Name = "Data Conclusão")]
        public DateTime? DtConclusao { get; set; }
    }
}
